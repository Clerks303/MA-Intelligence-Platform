# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database Optimized
  postgres:
    image: postgres:15-alpine
    container_name: ma-intelligence-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-ma_intelligence}
      POSTGRES_USER: ${DB_USER:-ma_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ma_password_change_in_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: [
      "postgres",
      "-c", "config_file=/etc/postgresql/postgresql.conf",
      "-c", "hba_file=/etc/postgresql/pg_hba.conf"
    ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ma_user} -d ${DB_NAME:-ma_intelligence}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ma-network

  # Redis Cache (US-002)
  redis:
    image: redis:7-alpine
    container_name: ma-intelligence-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: ["redis-server", "/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ma-network

  # Backend FastAPI
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ma-intelligence-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database optimized settings
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-ma_intelligence}
      - DB_USER=${DB_USER:-ma_user}
      - DB_PASSWORD=${DB_PASSWORD:-ma_password_change_in_production}
      - DB_ECHO=${DB_ECHO:-false}
      
      # Redis settings
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:-admin123}
      
      # External APIs
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PAPPERS_API_KEY=${PAPPERS_API_KEY}
      - KASPR_API_KEY=${KASPR_API_KEY}
      
      # Performance settings
      - WORKERS=4
      - MAX_CONNECTIONS=100
      - POOL_SIZE=20
      - MAX_OVERFLOW=50
      
      # Legacy Supabase (optional backup)
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --workers 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ma-network

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ma-intelligence-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ma-network

  # Nginx (Production only)
  nginx:
    image: nginx:alpine
    container_name: ma-intelligence-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - ma-network
    profiles:
      - production

networks:
  ma-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: