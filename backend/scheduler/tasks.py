"""
Celery Tasks - ML Scheduler
M&A Intelligence Platform
"""

import subprocess
import logging
import sys
from pathlib import Path
from datetime import datetime
from celery import current_task
from celery_app import app

logger = logging.getLogger(__name__)

@app.task(bind=True, name='tasks.run_ml_scoring')
def run_ml_scoring(self, batch_size: int = 1000, specific_companies: list = None):
    """
    T√¢che Celery pour lancer le scoring ML
    
    Args:
        batch_size: Taille des batches √† traiter
        specific_companies: Liste d'IDs d'entreprises sp√©cifiques (optionnel)
    """
    logger.info(f"üöÄ D√©marrage t√¢che ML scoring - Task ID: {self.request.id}")
    
    try:
        # Mise √† jour du statut
        self.update_state(
            state='PROGRESS',
            meta={'status': 'D√©marrage du scoring ML', 'progress': 0}
        )
        
        # Pr√©paration de la commande
        ml_service_path = Path(__file__).parent.parent / 'ml-service'
        script_path = ml_service_path / 'batch_scoring.py'
        
        cmd = ['python', str(script_path), '--batch-size', str(batch_size)]
        
        if specific_companies:
            cmd.extend(['--companies'] + [str(c) for c in specific_companies])
        
        # Ex√©cution du script ML
        logger.info(f"üìã Commande: {' '.join(cmd)}")
        
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            cwd=str(ml_service_path)
        )
        
        # Monitoring du processus
        self.update_state(
            state='PROGRESS',
            meta={'status': 'Calcul des scores en cours...', 'progress': 50}
        )
        
        stdout, stderr = process.communicate()
        
        if process.returncode == 0:
            logger.info("‚úÖ Scoring ML termin√© avec succ√®s")
            return {
                'status': 'SUCCESS',
                'message': 'Scoring ML termin√© avec succ√®s',
                'output': stdout,
                'processed_at': datetime.utcnow().isoformat()
            }
        else:
            logger.error(f"‚ùå Erreur scoring ML: {stderr}")
            raise Exception(f"Scoring ML √©chou√©: {stderr}")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur t√¢che scoring ML: {e}")
        self.update_state(
            state='FAILURE',
            meta={'status': f'Erreur: {str(e)}', 'error': str(e)}
        )
        raise

@app.task(bind=True, name='tasks.train_models')
def train_models(self, model_types: list = None):
    """
    T√¢che Celery pour r√©-entra√Æner les mod√®les ML
    
    Args:
        model_types: Types de mod√®les √† entra√Æner (optionnel)
    """
    logger.info(f"üß† D√©marrage entra√Ænement mod√®les - Task ID: {self.request.id}")
    
    try:
        self.update_state(
            state='PROGRESS',
            meta={'status': 'D√©marrage entra√Ænement des mod√®les', 'progress': 0}
        )
        
        # Pr√©paration de la commande
        ml_service_path = Path(__file__).parent.parent / 'ml-service'
        script_path = ml_service_path / 'train_models.py'
        
        cmd = ['python', str(script_path)]
        
        if model_types:
            cmd.extend(['--models'] + model_types)
        
        # Ex√©cution de l'entra√Ænement
        logger.info(f"üèãÔ∏è Commande entra√Ænement: {' '.join(cmd)}")
        
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            cwd=str(ml_service_path)
        )
        
        self.update_state(
            state='PROGRESS',
            meta={'status': 'Entra√Ænement en cours...', 'progress': 50}
        )
        
        stdout, stderr = process.communicate()
        
        if process.returncode == 0:
            logger.info("‚úÖ Entra√Ænement mod√®les termin√©")
            return {
                'status': 'SUCCESS',
                'message': 'Entra√Ænement termin√© avec succ√®s',
                'output': stdout,
                'trained_at': datetime.utcnow().isoformat()
            }
        else:
            logger.error(f"‚ùå Erreur entra√Ænement: {stderr}")
            raise Exception(f"Entra√Ænement √©chou√©: {stderr}")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur t√¢che entra√Ænement: {e}")
        self.update_state(
            state='FAILURE',
            meta={'status': f'Erreur: {str(e)}', 'error': str(e)}
        )
        raise

@app.task(bind=True, name='tasks.data_quality_check')
def data_quality_check(self):
    """
    T√¢che Celery pour v√©rifier la qualit√© des donn√©es
    """
    logger.info(f"üîç D√©marrage v√©rification qualit√© donn√©es - Task ID: {self.request.id}")
    
    try:
        self.update_state(
            state='PROGRESS',
            meta={'status': 'V√©rification qualit√© des donn√©es', 'progress': 0}
        )
        
        # TODO: Impl√©menter la v√©rification qualit√©
        # - V√©rifier les donn√©es manquantes
        # - D√©tecter les outliers
        # - V√©rifier la coh√©rence des donn√©es
        # - G√©n√©rer un rapport
        
        self.update_state(
            state='PROGRESS',
            meta={'status': 'Analyse en cours...', 'progress': 50}
        )
        
        # Simulation de v√©rification
        import time
        time.sleep(5)
        
        logger.info("‚úÖ V√©rification qualit√© termin√©e")
        return {
            'status': 'SUCCESS',
            'message': 'V√©rification qualit√© termin√©e',
            'checked_at': datetime.utcnow().isoformat(),
            'quality_score': 85  # Exemple
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur v√©rification qualit√©: {e}")
        self.update_state(
            state='FAILURE',
            meta={'status': f'Erreur: {str(e)}', 'error': str(e)}
        )
        raise

@app.task(name='tasks.trigger_manual_scoring')
def trigger_manual_scoring(company_ids: list = None, user_id: int = None):
    """
    T√¢che pour d√©clencher un scoring manuel sp√©cifique
    
    Args:
        company_ids: Liste des IDs d'entreprises √† scorer
        user_id: ID de l'utilisateur qui d√©clenche le scoring
    """
    logger.info(f"üë§ Scoring manuel d√©clench√© par utilisateur {user_id}")
    
    # Appel de la t√¢che principale avec les entreprises sp√©cifiques
    return run_ml_scoring.delay(
        batch_size=len(company_ids) if company_ids else 1000,
        specific_companies=company_ids
    )

# Fonction utilitaire pour monitoring
@app.task(name='tasks.get_task_status')
def get_task_status(task_id: str):
    """R√©cup√®re le statut d'une t√¢che"""
    result = app.AsyncResult(task_id)
    return {
        'task_id': task_id,
        'status': result.status,
        'result': result.result,
        'info': result.info
    }