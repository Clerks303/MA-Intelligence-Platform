# Redis configuration optimisée pour M&A Intelligence Platform
# Cache distribué et broker Celery

# ==============================================
# CONFIGURATION RÉSEAU
# ==============================================

# Bind toutes les interfaces pour Docker
bind 0.0.0.0

# Port par défaut
port 6379

# Timeout des connexions inactives
timeout 300

# TCP keepalive
tcp-keepalive 300

# ==============================================
# SÉCURITÉ (développement)
# ==============================================

# Pas de mot de passe en développement (Docker isolé)
# En production: requirepass your_strong_redis_password

# Commandes désactivées dangereuses
rename-command FLUSHDB ""
rename-command FLUSHALL ""
rename-command DEBUG ""
rename-command CONFIG ""

# ==============================================
# MÉMOIRE ET PERSISTENCE
# ==============================================

# Limite mémoire (ajustée pour Docker 2GB)
maxmemory 512mb

# Politique d'éviction quand maxmemory atteinte
# allkeys-lru: Éviction LRU sur toutes les clés (recommandé pour cache)
maxmemory-policy allkeys-lru

# Samples pour LRU (plus = plus précis mais plus lent)
maxmemory-samples 5

# ==============================================
# PERSISTENCE RDB (snapshots)
# ==============================================

# Snapshots automatiques
# save <secondes> <modifications>
save 900 1      # Snapshot si >= 1 modification en 15min
save 300 10     # Snapshot si >= 10 modifications en 5min
save 60 10000   # Snapshot si >= 10000 modifications en 1min

# Arrêter écriture si snapshot fail
stop-writes-on-bgsave-error yes

# Compression des snapshots
rdbcompression yes

# Checksum des snapshots
rdbchecksum yes

# Nom du fichier snapshot
dbfilename dump.rdb

# Répertoire de travail
dir /data

# ==============================================
# PERSISTENCE AOF (Append Only File)
# ==============================================

# AOF désactivé par défaut (RDB suffisant pour cache)
appendonly no

# Si AOF activé, politique de sync
# appendfsync always    # Très sûr mais lent
# appendfsync everysec  # Compromis sécurité/performance
# appendfsync no        # Rapide mais risque perte données

# ==============================================
# PERFORMANCE
# ==============================================

# Pas de swap (important pour performance)
vm-enabled no

# Hash tables optimisées
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Lists optimisées
list-max-ziplist-size -2
list-compress-depth 0

# Sets optimisées
set-max-intset-entries 512

# Sorted sets optimisées
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog optimisé
hll-sparse-max-bytes 3000

# ==============================================
# LOGS
# ==============================================

# Niveau de log (notice pour production, debug pour développement)
loglevel notice

# Destination logs (stdout pour Docker)
logfile ""

# Logs queries lentes (microsecondes)
slowlog-log-slower-than 10000

# Nombre max d'entrées slowlog
slowlog-max-len 128

# ==============================================
# CONFIGURATION CLIENT
# ==============================================

# Nombre max de clients simultanés
maxclients 1000

# Buffer de sortie pour clients normaux
client-output-buffer-limit normal 0 0 0

# Buffer pour réplication
client-output-buffer-limit replica 256mb 64mb 60

# Buffer pour pub/sub
client-output-buffer-limit pubsub 32mb 8mb 60

# ==============================================
# RÉPLICATION (si cluster future)
# ==============================================

# Réplication automatique en cas de perte master
replica-serve-stale-data yes

# Lecture seule pour replicas
replica-read-only yes

# Priorité réplication (0 = jamais promoted master)
replica-priority 100

# ==============================================
# CONFIGURATION SPÉCIFIQUE APPLICATION
# ==============================================

# Databases (par défaut 16)
databases 16

# Database 0 : Cache général (enrichissement, scoring)
# Database 1 : Broker Celery
# Database 2 : Results Celery
# Database 3 : Rate limiting
# Database 4 : Sessions utilisateur
# Database 5-15 : Réservées future

# ==============================================
# OPTIMISATIONS AVANCÉES
# ==============================================

# Latency monitoring
latency-monitor-threshold 100

# Active rehashing pour performance
activerehashing yes

# Lazy freeing (éviter blocage sur DELETE de grosses structures)
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes
replica-lazy-flush yes

# ==============================================
# MODULES (extensions)
# ==============================================

# Modules chargés (à décommenter si besoin)
# loadmodule /opt/redis-stack/lib/redisearch.so
# loadmodule /opt/redis-stack/lib/redistimeseries.so
# loadmodule /opt/redis-stack/lib/redisjson.so

# ==============================================
# MONITORING ET STATS
# ==============================================

# Info sections disponibles par défaut
# Utiliser: redis-cli INFO pour voir les stats

# Configuration de base prête pour :
# - Cache application (hit ratio optimisé)
# - Message broker Celery
# - Rate limiting
# - Sessions utilisateur

# Commandes utiles monitoring :
# redis-cli INFO memory
# redis-cli INFO stats
# redis-cli SLOWLOG GET 10
# redis-cli LATENCY HISTORY command